result
######################## region algorithm tree calculation ##################
treeCalc <- function(x,y) {
n <- length(y)
# first compute the "best" region for the first region split
regCon0 <- findMaxar2(x,y)
# this will be the constraints for the next level X1 and X2
regCon1 <- regCon0
regCon2 <- regCon0
regCon2$jcase <- invf(regCon1$jcase)  # regCon2 = negation of regCon1
# next split x (and y) into region1 (best region) and region2 (the rest)
x1 <- x[fcons(regCon1$jcase, x[ ,regCon1$var1], x[ , regCon1$var2], regCon1$cons), ]  # region 1
y1 <- y[fcons(regCon1$jcase, x[ ,regCon1$var1], x[ , regCon1$var2], regCon1$cons)]
x2 <- x[fcons(regCon2$jcase, x[ ,regCon2$var1], x[ , regCon2$var2], regCon2$cons), ]   # region 2
y2 <- y[fcons(regCon2$jcase, x[ ,regCon2$var1], x[ , regCon2$var2], regCon2$cons)]
# second compute the "best" region for the two regions from step one
regCon3 <- findMaxar2(x1,y1)
regCon5 <- findMaxar2(x2,y2)
regCon4 <- regCon3
regCon4$jcase <- invf(regCon3$jcase)
regCon6 <- regCon5
regCon6$jcase <- invf(regCon5$jcase)
# next split x1 into x3 (best region) and !x3 = x4 (same for y) to compute the split for the x1 region
x3 <- x1[fcons(regCon3$jcase, x1[ ,regCon3$var1], x1[ , regCon3$var2], regCon3$cons), ]   # region 3
y3 <- y1[fcons(regCon3$jcase, x1[ ,regCon3$var1], x1[ , regCon3$var2], regCon3$cons)]
x4 <- x1[fcons(regCon4$jcase, x1[ ,regCon4$var1], x1[ , regCon4$var2], regCon4$cons), ]   # region 4
y4 <- y1[fcons(regCon4$jcase, x1[ ,regCon4$var1], x1[ , regCon4$var2], regCon4$cons)]
# next split x2 into x5 (best regCon) and !x5 = x6 (same for y) to compute the split for the x2 region
x5 <- x2[fcons(regCon5$jcase, x2[ ,regCon5$var1], x2[ , regCon5$var2], regCon5$cons), ]   # region 5
y5 <- y2[fcons(regCon5$jcase, x2[ ,regCon5$var1], x2[ , regCon5$var2], regCon5$cons)]
x6 <- x2[fcons(regCon6$jcase, x2[ ,regCon6$var1], x2[ , regCon6$var2], regCon6$cons), ]   # region 6
y6 <- y2[fcons(regCon6$jcase, x2[ ,regCon6$var1], x2[ , regCon6$var2], regCon6$cons)]
ar2_0 <- fit(x,y)
ar2_1 <- fit(x1,y1)
ar2_2 <- fit(x2,y2)
ar2_3 <- fit(x3,y3)
ar2_4 <- fit(x4,y4)
ar2_5 <- fit(x5,y5)
ar2_6 <- fit(x6,y6)
print( c("ar2_0 = ", ar2_0, "  length y = ", length(y) ) )
print( c("ar2_1 = ", ar2_1, "  length y = ", length(y1) ) )
print( c("ar2_2 = ", ar2_2, "  length y = ", length(y2) ) )
print( c("ar2_3 = ", ar2_3, "  length y = ", length(y3) ) )
print( c("ar2_4 = ", ar2_4, "  length y = ", length(y4) ) )
print( c("ar2_5 = ", ar2_5, "  length y = ", length(y5) ) )
print( c("ar2_6 = ", ar2_6, "  length y = ", length(y6) ) )
ar2_total <- (ar2_3 * length(y3) + ar2_4 * length(y4) + ar2_5 * length(y5) + ar2_6 * length(y6))/n
ar2_total
# fill in indicies
regCon0$ind <- 0
regCon1$ind <- 1
regCon2$ind <- 2
regCon3$ind <- 3
regCon4$ind <- 4
regCon5$ind <- 5
regCon6$ind <- 6
# fill in lengths of y
regCon0$dim <- length(y)
regCon1$dim <- length(y1)
regCon2$dim <- length(y2)
regCon3$dim <- length(y3)
regCon4$dim <- length(y4)
regCon5$dim <- length(y5)
regCon6$dim <- length(y6)
# fill in ar2 values
regCon0$ar2 <- ar2_0
regCon1$ar2 <- ar2_1
regCon2$ar2 <- ar2_2
regCon3$ar2 <- ar2_3
regCon4$ar2 <- ar2_4
regCon5$ar2 <- ar2_5
regCon6$ar2 <- ar2_6
result <- rbind(regCon0, regCon1, regCon2, regCon3, regCon4, regCon5, regCon6)
}
#####################  some results
result <- treeCalc(x,y)
result
summary(x)
source("e:/Data Science/My Constrained Regions R code/Support functions.txt")
######################## region algorithm tree calculation ##################
treeCalc <- function(x,y) {
n <- length(y)
# first compute the "best" region for the first region split
regCon0 <- findMaxar2(x,y)
# this will be the constraints for the next level X1 and X2
regCon1 <- regCon0
regCon2 <- regCon0
regCon2$jcase <- invf(regCon1$jcase)  # regCon2 = negation of regCon1
# next split x (and y) into region1 (best region) and region2 (the rest)
x1 <- x[fcons(regCon1$jcase, x[ ,regCon1$var1], x[ , regCon1$var2], regCon1$cons), ]  # region 1
y1 <- y[fcons(regCon1$jcase, x[ ,regCon1$var1], x[ , regCon1$var2], regCon1$cons)]
x2 <- x[fcons(regCon2$jcase, x[ ,regCon2$var1], x[ , regCon2$var2], regCon2$cons), ]   # region 2
y2 <- y[fcons(regCon2$jcase, x[ ,regCon2$var1], x[ , regCon2$var2], regCon2$cons)]
# second compute the "best" region for the two regions from step one
regCon3 <- findMaxar2(x1,y1)
regCon5 <- findMaxar2(x2,y2)
regCon4 <- regCon3
regCon4$jcase <- invf(regCon3$jcase)
regCon6 <- regCon5
regCon6$jcase <- invf(regCon5$jcase)
# next split x1 into x3 (best region) and !x3 = x4 (same for y) to compute the split for the x1 region
x3 <- x1[fcons(regCon3$jcase, x1[ ,regCon3$var1], x1[ , regCon3$var2], regCon3$cons), ]   # region 3
y3 <- y1[fcons(regCon3$jcase, x1[ ,regCon3$var1], x1[ , regCon3$var2], regCon3$cons)]
x4 <- x1[fcons(regCon4$jcase, x1[ ,regCon4$var1], x1[ , regCon4$var2], regCon4$cons), ]   # region 4
y4 <- y1[fcons(regCon4$jcase, x1[ ,regCon4$var1], x1[ , regCon4$var2], regCon4$cons)]
# next split x2 into x5 (best regCon) and !x5 = x6 (same for y) to compute the split for the x2 region
x5 <- x2[fcons(regCon5$jcase, x2[ ,regCon5$var1], x2[ , regCon5$var2], regCon5$cons), ]   # region 5
y5 <- y2[fcons(regCon5$jcase, x2[ ,regCon5$var1], x2[ , regCon5$var2], regCon5$cons)]
x6 <- x2[fcons(regCon6$jcase, x2[ ,regCon6$var1], x2[ , regCon6$var2], regCon6$cons), ]   # region 6
y6 <- y2[fcons(regCon6$jcase, x2[ ,regCon6$var1], x2[ , regCon6$var2], regCon6$cons)]
ar2_0 <- fit(x,y)
ar2_1 <- fit(x1,y1)
ar2_2 <- fit(x2,y2)
ar2_3 <- fit(x3,y3)
ar2_4 <- fit(x4,y4)
ar2_5 <- fit(x5,y5)
ar2_6 <- fit(x6,y6)
print( c("ar2_0 = ", ar2_0, "  length y = ", length(y) ) )
print( c("ar2_1 = ", ar2_1, "  length y = ", length(y1) ) )
print( c("ar2_2 = ", ar2_2, "  length y = ", length(y2) ) )
print( c("ar2_3 = ", ar2_3, "  length y = ", length(y3) ) )
print( c("ar2_4 = ", ar2_4, "  length y = ", length(y4) ) )
print( c("ar2_5 = ", ar2_5, "  length y = ", length(y5) ) )
print( c("ar2_6 = ", ar2_6, "  length y = ", length(y6) ) )
ar2_total <- (ar2_3 * length(y3) + ar2_4 * length(y4) + ar2_5 * length(y5) + ar2_6 * length(y6))/n
print(c(ar2_total))
# fill in indicies
regCon0$ind <- 0
regCon1$ind <- 1
regCon2$ind <- 2
regCon3$ind <- 3
regCon4$ind <- 4
regCon5$ind <- 5
regCon6$ind <- 6
# fill in lengths of y
regCon0$dim <- length(y)
regCon1$dim <- length(y1)
regCon2$dim <- length(y2)
regCon3$dim <- length(y3)
regCon4$dim <- length(y4)
regCon5$dim <- length(y5)
regCon6$dim <- length(y6)
# fill in ar2 values
regCon0$ar2 <- ar2_0
regCon1$ar2 <- ar2_1
regCon2$ar2 <- ar2_2
regCon3$ar2 <- ar2_3
regCon4$ar2 <- ar2_4
regCon5$ar2 <- ar2_5
regCon6$ar2 <- ar2_6
result <- rbind(regCon0, regCon1, regCon2, regCon3, regCon4, regCon5, regCon6)
}
#####################  some results
result <- treeCalc(x,y)
result
recordRead <- function(a,b) {
if (a$ind==2 & b$ind==3) { Result <- 1 else Result <-0}
Result
}
recordRead <- function(a,b) {
Result <- 0
if (a$ind==2 & b$ind==3) { Result <- 1 }
Result
}
testResult <- recordRead(result[,3], result[,4])
testResult <- recordRead(result[3,], result[4,])
testResult
result[4]$jcase
result
result$jcase[4]
regionX <- function(x, c1, c2) {
# filter x based on constraint c1
x <- x[fcons( c1$jcase, c1$var2, c1$var2, c1$cons), ]
# now filter again based on c2
x <- x[fcons( c2$jcase, c2$var2, c2$var2, c2$cons), ]
# return double filtered x
x
}
xtest <- x
dim(xtest)
regionX(xtest, result[2], result[3])
result[2]
regionX(xtest, result[,2], result[,3])
result[,2]
result[2,]
regionX(xtest, result[2,], result[3,])
result[3,]
regionX <- function(x, c1, c2) {
# filter x based on constraint c1
x1 <- x[fcons( c1$jcase, x[ ,c1$var2], x[ ,c1$var2], c1$cons), ]
# now filter again based on c2
x2 <- x1[fcons( c2$jcase, x[ ,c2$var2], x[ ,c2$var2], c2$cons), ]
# return double filtered x
x2
}
regionX(xtest,result[2,], result[3,])
regionX <- function(x, c1, c2) {
# filter x based on constraint c1
x1 <- x[fcons( c1$jcase, x[ ,c1$var2], x[ ,c1$var2], c1$cons), ]
# now filter again based on c2
#x2 <- x1[fcons( c2$jcase, x[ ,c2$var2], x[ ,c2$var2], c2$cons), ]
# return double filtered x
x1
}
regionX(xtest,result[2,], result[3,])
dim( regionX(xtest,result[2,], result[3,]) )
regionX <- function(x, c1, c2) {
# filter x based on constraint c1
x1 <- x[fcons( c1$jcase, x[ ,c1$var2], x[ ,c1$var2], c1$cons), ]
x1 <- x
# now filter again based on c2
x2 <- x1[fcons( c2$jcase, x[ ,c2$var2], x[ ,c2$var2], c2$cons), ]
# return double filtered x
x1
}
dim( regionX(xtest,result[2,], result[3,]) )
regionX <- function(x, c1, c2) {
# filter x based on constraint c1
x1 <- x[fcons( c1$jcase, x[ ,c1$var2], x[ ,c1$var2], c1$cons), ]
x1 <- x
# now filter again based on c2
x2 <- x1[fcons( c2$jcase, x[ ,c2$var2], x[ ,c2$var2], c2$cons), ]
# return double filtered x
x2
}
dim( regionX(xtest,result[2,], result[3,]) )
result
regionX <- function(x, c1, c2) {
# filter x based on constraint c1
x1 <- x[fcons( c1$jcase, x[ ,c1$var2], x[ ,c1$var2], c1$cons), ]
# now filter again based on c2
x2 <- x1[fcons( c2$jcase, x[ ,c2$var2], x[ ,c2$var2], c2$cons), ]
# return double filtered x
x2
}
dim( regionX(xtest,result[2,], result[4,]) )
regionX <- function(x, c1, c2) {
# filter x based on constraint c1
x1 <- x[fcons( c1$jcase, x[ ,c1$var2], x[ ,c1$var2], c1$cons), ]
# now filter again based on c2
xt <- x1
x2 <- xt[fcons( c2$jcase, x[ ,c2$var2], x[ ,c2$var2], c2$cons), ]
# return double filtered x
x2
}
dim( regionX(xtest,result[2,], result[4,]) )
regionX <- function(x, c1, c2) {
# filter x based on constraint c1
x <- x[fcons( c1$jcase, x[ ,c1$var2], x[ ,c1$var2], c1$cons), ]
print(c"dim x = ", dim(x) )
# now filter again based on c2
x <- x[fcons( c2$jcase, x[ ,c2$var2], x[ ,c2$var2], c2$cons), ]
print(c"dim x = ", dim(x) )
# return double filtered x
x
}
regionX <- function(x, c1, c2) {
# filter x based on constraint c1
x <- x[fcons( c1$jcase, x[ ,c1$var2], x[ ,c1$var2], c1$cons), ]
print(c"dim x = ", dim(x) )
# now filter again based on c2
x <- x[fcons( c2$jcase, x[ ,c2$var2], x[ ,c2$var2], c2$cons), ]
print(c"dim x = ", dim(x) )
# return double filtered x
x
}
regionX <- function(x, c1, c2) {
# filter x based on constraint c1
x <- x[fcons( c1$jcase, x[ ,c1$var2], x[ ,c1$var2], c1$cons), ]
print(c"dim x = ", dim(x) )
# now filter again based on c2
x <- x[fcons( c2$jcase, x[ ,c2$var2], x[ ,c2$var2], c2$cons), ]
print(c"dim x = ", dim(x) )
# return double filtered x
x
}
result[3,]
result[4,]
result[2,]
regionX <- function(x, c1, c2) {
# filter x based on constraint c1
x <- x[fcons( c1$jcase, x[ ,c1$var2], x[ ,c1$var2], c1$cons), ]
print(c"dim x = ", dim(x) )
# now filter again based on c2
#x <- x[fcons( c2$jcase, x[ ,c2$var2], x[ ,c2$var2], c2$cons), ]
print(c"dim x = ", dim(x) )
# return double filtered x
x
}
testResult <- regionX(x, result[2,], result[4,])
regionX <- function(x, c1, c2) {
# filter x based on constraint c1
x <- x[fcons( c1$jcase, x[ ,c1$var2], x[ ,c1$var2], c1$cons), ]
print(c"dim x = ", dim(x) )
# now filter again based on c2
#x <- x[fcons( c2$jcase, x[ ,c2$var2], x[ ,c2$var2], c2$cons), ]
print(c"dim x = ", dim(x) )
# return double filtered x
x
}
csvTemp <- read.csv("specdata/010.csv")
setwd("E:/coursera_localrepo")
csvTemp <- read.csv("specdata/010.csv")
csvTemp[1:20,]
csvTemp[1:200,]
complete("specdata",1:100)
complete<- function(directory,  id) {
for (idnum in id) {
# put proper number of zeros in front of idnum to open the .csv files in directory
if (idnum < 10) idchar <- paste("00",as.character(idnum), sep="")
if (idnum>=10 & idnum<100) idchar<- paste("0", as.character(idnum), sep="")
if (idnum>=100) idchar <- as.character(idnum)
# compute the individual .csv file names and open them
csvname = paste(directory, "/", idchar, ".csv", sep="")
csvData = read.csv(csvname)
# check if either "nitrate" or "sulfate" = NA
csvCount <- subset(csvData, !is.na(csvData$nitrate) & !is.na(csvData$sulfate) )
print (c(idnum, dim(csvCount)[1]))
}
}
complete("specdata",1:100)
complete<- function(directory,  id) {
for (idnum in id) {
# put proper number of zeros in front of idnum to open the .csv files in directory
if (idnum < 10) idchar <- paste("00",as.character(idnum), sep="")
if (idnum>=10 & idnum<100) idchar<- paste("0", as.character(idnum), sep="")
if (idnum>=100) idchar <- as.character(idnum)
# compute the individual .csv file names and open them
csvname = paste(directory, "/", idchar, ".csv", sep="")
csvData = read.csv(csvname)
# check if either "nitrate" or "sulfate" = NA
csvCount <- subset(csvData, !is.na(csvData$nitrate) & !is.na(csvData$sulfate) )
print (c(idnum, dim(csvCount)[1]))
print (c(idnum, cor(csvCount$sulfate, csvCount$nitrate))
}
}
complete("specdata",1)
complete<- function(directory,  id) {
for (idnum in id) {
# put proper number of zeros in front of idnum to open the .csv files in directory
if (idnum < 10) idchar <- paste("00",as.character(idnum), sep="")
if (idnum>=10 & idnum<100) idchar<- paste("0", as.character(idnum), sep="")
if (idnum>=100) idchar <- as.character(idnum)
# compute the individual .csv file names and open them
csvname = paste(directory, "/", idchar, ".csv", sep="")
csvData = read.csv(csvname)
# check if either "nitrate" or "sulfate" = NA
csvCount <- subset(csvData, !is.na(csvData$nitrate) & !is.na(csvData$sulfate) )
print (c(idnum, dim(csvCount)[1]))
print (c(idnum, cor(csvCount$sulfate, csvCount$nitrate))
}
}
complete("specdata",1)
complete<- function(directory,  id) {
for (idnum in id) {
# put proper number of zeros in front of idnum to open the .csv files in directory
if (idnum < 10) idchar <- paste("00",as.character(idnum), sep="")
if (idnum>=10 & idnum<100) idchar<- paste("0", as.character(idnum), sep="")
if (idnum>=100) idchar <- as.character(idnum)
# compute the individual .csv file names and open them
csvname = paste(directory, "/", idchar, ".csv", sep="")
csvData = read.csv(csvname)
# check if either "nitrate" or "sulfate" = NA
csvCount <- subset(csvData, !is.na(csvData$nitrate) & !is.na(csvData$sulfate) )
print (c(idnum, dim(csvCount)[1]))
print (c(idnum, cor(csvCount$sulfate, csvCount$nitrate))
}
complete<- function(directory,  id) {
for (idnum in id) {
# put proper number of zeros in front of idnum to open the .csv files in directory
if (idnum < 10) idchar <- paste("00",as.character(idnum), sep="")
if (idnum>=10 & idnum<100) idchar<- paste("0", as.character(idnum), sep="")
if (idnum>=100) idchar <- as.character(idnum)
# compute the individual .csv file names and open them
csvname = paste(directory, "/", idchar, ".csv", sep="")
csvData = read.csv(csvname)
# check if either "nitrate" or "sulfate" = NA
csvCount <- subset(csvData, !is.na(csvData$nitrate) & !is.na(csvData$sulfate) )
print (c(idnum, dim(csvCount)[1]))
print (c(idnum, cor(csvCount$sulfate, csvCount$nitrate))
}
complete<- function(directory,  id) {
for (idnum in id) {
# put proper number of zeros in front of idnum to open the .csv files in directory
if (idnum < 10) idchar <- paste("00",as.character(idnum), sep="")
if (idnum>=10 & idnum<100) idchar<- paste("0", as.character(idnum), sep="")
if (idnum>=100) idchar <- as.character(idnum)
# compute the individual .csv file names and open them
csvname = paste(directory, "/", idchar, ".csv", sep="")
csvData = read.csv(csvname)
# check if either "nitrate" or "sulfate" = NA
csvCount <- subset(csvData, !is.na(csvData$nitrate) & !is.na(csvData$sulfate) )
print (c(idnum, dim(csvCount)[1]))
print (c(idnum, cor(csvCount$sulfate, csvCount$nitrate)))
}
}
complete("specdata",1)
complete<- function(directory,  id) {
for (idnum in id) {
# put proper number of zeros in front of idnum to open the .csv files in directory
if (idnum < 10) idchar <- paste("00",as.character(idnum), sep="")
if (idnum>=10 & idnum<100) idchar<- paste("0", as.character(idnum), sep="")
if (idnum>=100) idchar <- as.character(idnum)
# compute the individual .csv file names and open them
csvname = paste(directory, "/", idchar, ".csv", sep="")
csvData = read.csv(csvname)
# check if either "nitrate" or "sulfate" = NA
csvCount <- subset(csvData, !is.na(csvData$nitrate) & !is.na(csvData$sulfate) )
print (c(idnum, dim(csvCount)[1]))
print (c(idnum, cor(csvCount$sulfate, csvCount$nitrate)))
}
}
complete("specdata",1:100)
corr<- function(directory,  thres) {
for (idnum in 1:332) {
# put proper number of zeros in front of idnum to open the .csv files in directory
if (idnum < 10) idchar <- paste("00",as.character(idnum), sep="")
if (idnum>=10 & idnum<100) idchar<- paste("0", as.character(idnum), sep="")
if (idnum>=100) idchar <- as.character(idnum)
# compute the individual .csv file names and open them
csvname = paste(directory, "/", idchar, ".csv", sep="")
csvData = read.csv(csvname)
# check if either "nitrate" or "sulfate" = NA
csvCount <- subset(csvData, !is.na(csvData$nitrate) & !is.na(csvData$sulfate) )
if( dim(csvCount)[1]) >= thres)  print (c(idnum, cor(csvCount$sulfate, csvCount$nitrate)))
}
}
corr<- function(directory,  thres) {
for (idnum in 1:332) {
# put proper number of zeros in front of idnum to open the .csv files in directory
if (idnum < 10) idchar <- paste("00",as.character(idnum), sep="")
if (idnum>=10 & idnum<100) idchar<- paste("0", as.character(idnum), sep="")
if (idnum>=100) idchar <- as.character(idnum)
# compute the individual .csv file names and open them
csvname = paste(directory, "/", idchar, ".csv", sep="")
csvData = read.csv(csvname)
# check if either "nitrate" or "sulfate" = NA
csvCount <- subset(csvData, !is.na(csvData$nitrate) & !is.na(csvData$sulfate) )
if( dim(csvCount)[1] >= thres)  print (c(idnum, cor(csvCount$sulfate, csvCount$nitrate)))
}
}
corr("specdata",150)
corr<- function(directory,  thres) {
result <- NULL
for (idnum in 1:332) {
# put proper number of zeros in front of idnum to open the .csv files in directory
if (idnum < 10) idchar <- paste("00",as.character(idnum), sep="")
if (idnum>=10 & idnum<100) idchar<- paste("0", as.character(idnum), sep="")
if (idnum>=100) idchar <- as.character(idnum)
# compute the individual .csv file names and open them
csvname = paste(directory, "/", idchar, ".csv", sep="")
csvData = read.csv(csvname)
# check if either "nitrate" or "sulfate" = NA
csvCount <- subset(csvData, !is.na(csvData$nitrate) & !is.na(csvData$sulfate) )
if( dim(csvCount)[1] >= thres)  print (c(idnum, cor(csvCount$sulfate, csvCount$nitrate)))
if( dim(csvCount)[1] >= thres)  result <- c(result, cor(csvCount$sulfate, csvCount$nitrate))
}
}
ans1 <- corr("specdata", 150)
ans2 <- corr("specdata", 400)
ans3 <- corr("specdata", 5000)
corr<- function(directory,  thres) {
result <- NULL
for (idnum in 1:332) {
# put proper number of zeros in front of idnum to open the .csv files in directory
if (idnum < 10) idchar <- paste("00",as.character(idnum), sep="")
if (idnum>=10 & idnum<100) idchar<- paste("0", as.character(idnum), sep="")
if (idnum>=100) idchar <- as.character(idnum)
# compute the individual .csv file names and open them
csvname = paste(directory, "/", idchar, ".csv", sep="")
csvData = read.csv(csvname)
# check if either "nitrate" or "sulfate" = NA
csvCount <- subset(csvData, !is.na(csvData$nitrate) & !is.na(csvData$sulfate) )
if( dim(csvCount)[1] >= thres)  print (c(idnum, cor(csvCount$sulfate, csvCount$nitrate)))
if( dim(csvCount)[1] >= thres)  result <- c(result, cor(csvCount$sulfate, csvCount$nitrate))
}
if (result==NULL) result <- 0
result
}
ans3 <- corr("specdata", 5000)
result <- NULL
result
if (result==NULL) result <- 0
result==NULL
result=NULL
result
a <- result==NULL
a
if ((result==NULL)==logical(0)) result <-0
corr<- function(directory,  thres) {
result <- NULL
for (idnum in 1:332) {
# put proper number of zeros in front of idnum to open the .csv files in directory
if (idnum < 10) idchar <- paste("00",as.character(idnum), sep="")
if (idnum>=10 & idnum<100) idchar<- paste("0", as.character(idnum), sep="")
if (idnum>=100) idchar <- as.character(idnum)
# compute the individual .csv file names and open them
csvname = paste(directory, "/", idchar, ".csv", sep="")
csvData = read.csv(csvname)
# check if either "nitrate" or "sulfate" = NA
csvCount <- subset(csvData, !is.na(csvData$nitrate) & !is.na(csvData$sulfate) )
if( dim(csvCount)[1] >= thres)  print (c(idnum, cor(csvCount$sulfate, csvCount$nitrate)))
if( dim(csvCount)[1] >= thres)  result <- c(result, cor(csvCount$sulfate, csvCount$nitrate))
}
if (dim(csvCount)[1]<thres) result <- 0
result
}
ans3 <- corr("specdata", 5000)
ans3
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
